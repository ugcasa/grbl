#!/bin/bash module
# GRBL modulename.sh configuration file

[modulename]
enabled=true
indicator_key=f2

#: TODO, add wanted variables and remove, or leave comment lines below
#: # All needed to know GRBL configuration files and variable names:
#:
#: ## First line of config file:
#:
#: '#!/bin/bash' is just for syntax highlighting, most editors uses bash highlighting when they see this
#: and bash highlighting makes config much more readable
#:
#: After bash script definition there is one word that tells what kind of configuration is in question.
#: there is three types: 'module', 'global' and 'source'
#:
#: - 'module' This indicates for 'config.sh' that 'modulemame.cfg' is made for module use only and generates
#: 'grbl_moduname.rc' file to /tmp
#:
#: - 'global' This indicates to 'config.sh' to import 'modulemame.cfg' configurations to '~/.gururc' file
#: what is run every time bash is called. This makes module configuration to seen "globally" every time someone
#: starts bash command interrupter
#:
#: - 'source' means that 'config.sh' do nothing for it and let module to source 'modulename.cfg' as it is when needed
#: This way more variable types are available and configurations are all time up to date without any effort
#: Useful for small straight forward function collection type modules.
#:
#: 	#!/bin/bash module
#:
#: Optional version number may follow next, but it is not defined yet.
#:
#: ## Second line of config file:
#: Its a comment. Often informing for what use file is for. GRBL, modulename and word configuration is enough.
#:
#: ## Variable formation
#:
#: In following example, 'moduleneme' module is enabled in 'modulename.cfg';
#:
#: 	[modulename]
#: 	enabled=true
#:
#: This value is readable from '$GURU_MODULENAME_ENABLED' variable during module execution.
#:
#: *First part* of variable name is 'GURU'. Config file cannot affect this. all exported RGBL environmental variables
#: do contain this part.
#:
#: *Second part* is generated based on header written between square brackets in config files.
#: It is advisable to use module name for clarity '[modulename]' gives name for second part of variablename '_MODULENAME_'
#:
#: *Third part* is variable name below header '_ENABLED'
#:
#: This gives variable name 'GURU_MODULENAME_ENABLED' witch have value defined after equal sing 'true'.
#: bash not tolerate spaces eater front- or backside of equal sing, nether tolerates 'config.sh'
#:
#: 	source modulename.sh
#: 	echo $GURU_MODULENAME_ENABLED
#:     > true
#:
#: # Temporary overwriting global variables
#:
#: Any module can set or overwrite another module global type variables when module name is written between
#: square brackets '[ ]' and variable is defined under it. Setting is available only when module is alive and
#: does not affect function of another modules.
#:
#: Example: modulename.sh do not like mqtt module and want it to be disable avery time modulename.sh is run:
#:
#: 	#!/bin/bash module
#: 	# GRBL modulename.sh configuration file
#:
#: 	[mqtt]
#: 	enabled=
#:
#: 	[modulename]
#: 	my_stuff='something'
#:
#: This makes mqtt.sh configuration that is 'global' type to disable mqtt.sh functionalities in modulename.sh runtime
#:
#: 	GURU_MQTT_ENABLED=
#: 	GURU_MODULENAME_MY_STUFF='something'
#:
#: Example 2: overwriting 'global' type variable $GURU_ACCESS_DOMAIN set in 'user.cfg' temporary point to another server
#:
#: 	#!/bin/bash module
#: 	# GRBL modulename.sh configuration file
#:
#: 	access_domain=tissifetissi.org
#:
#: 	[modulename]
#: 	my_stuff='something kinky'
#:
#: 	GURU_ACCESS_DOMAIN=tissifetissi.org
#: 	GURU_MODULENAME_MY_STUFF='something kinky'





