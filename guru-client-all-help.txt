arguments: help all
counter help
guru-client counter help 

usage:    guru counter [argument] [counter_name] <value>

arguments:
 get                         get counter value 
 ls                          list of counters 
 inc                         increment counter value 
 add [counter_name] <value>  add to countre value (def 1)
 set [counter_name] <value>  set and set counter preset value (def 0)
 rm                          remove counter 

If no argument given returns counter value 

install help
guru-client installer help 

usage:    guru install [keyword] 

keywords:
 vscode               ms visual code 
 virtualbox           virtualbox 
 kaldi                speech recognize AI 
 java                 java runtime 
 python               python3 and venv 
 anaconda             anaconda dev tool
 django               django framework 
 mqtt-client          mopsquitto MQTT clients 
 webmin               webmin tools 
 radio                gnuradio, HackRF, spectrumanalyzer and fosphor 
 gnuradio             install radio software separately: 
 hackrf               
 spectrumanalyzer     
 fosphor              
 tiv                  tiv text mode picture viewer 

uninstall help
guru-client uninstaller help

usage:    guru uninstall [config|status|help]

commands:
 config                      remove also configurations
 status                      blink esc, print status and return 
 help                        this help 

config help
guru-client config help 

usage:    guru config [pull|push|export|user|help -v] 

actions:
 export        export configuration to environment
               (run this every time configuration is changed) 
 pull          poll user configuration from server 
 push          push user configuration to server 
 user          open user configuration in dialog 
 edit          edit user config file with preferred editor 

general flags:

 -s               be more silent, printout only errors and warnings
 -v               set verbose, headers and some details
 -V               more deep verbose, unit level details
 -W               damn deep verbose, action level details
 -u <username>    change guru user name temporary  
 -h <hosname>     change computer host name name temporary 
 -l               set logging on to file /home/casa/.data/guru-client.log
 -f               set force mode on, be more aggressive

examples:
     'guru config'                                 get current host and user settings
     'guru pull -h <host_name> -u <user_name>'     get user and host specific setting from server  
corsair help
guru-client corsair help

usage:    guru corsair [start|init|set|reset|end|status|help|install|patch|compile|remove|raw_start|raw_status|raw_stop|set-suspend] <key> <color>

commands:
 status                      printout status 
 start                       start ckb-next-daemon 
 stop                        stop ckb-next-daemon
 init <mode>                 initialize keyboard mode 
                             [status|red|olive|dark] able to set keys 
                             [trippy|yes-no|rainbow] active animations 
 set <key> <color>           write key color to keyboard key  
 reset <key>                 reset one key or if empty, all pipes 
 end                         end playing with keyboard, set to normal 
 install                     install requirements 
 compile                     only compile, do not clone or patch
 patch <device>              edit source devices: K68, IRONCLAW
 set-suspend                 active suspend control to avoid suspend issues
 remove                      remove corsair driver 
 help -v|-V                  get more detailed help by adding verbosity flag

raw functions for non systemd linux:
 raw_start <1..7>            start ckb-next, number is deepness 
 raw_status                  rad status (without systemd)
 raw_stop                    stop by killing app
 raw_disable                 disable service (some systemd) 

examples:
 guru corsair status        printout status report 
 guru corsair init trippy   initialize trippu color profile
 guru corsair end           stop playing with colors, return to normal

mount help
guru-client mount help 

usage:    guru mount|unount|check|check-system <source> <target>

commands:
 ls                       list of mounted folders 
 check [target]           check that mount point is mounted 
 check-system             check that guru system folder is mounted 
 mount [source] [target]  mount folder in file server to local folder 
 mount all                mount all known folders in server 
                          edit /home/casa/.config/guru/casa/user.cfg or run 
                          'guru config user' to setup default mountpoints 
                          more information of adding default mountpoint type: guru mount help-default
 poll start|end           start or end module status polling 

example:
      guru mount /home/casa/share /home/casa/guru/projects
      guru umount /home/casa/guru/projects
unmount help
guru-client unmount help 

usage:    guru unmount <mount_point(s)>|defaults|all

commands:
 ls               list of mounted folders 
 <mount_point>    unmount mount point 
 mp1 mp2 mp3      unmount varies known mountpoints set in user config 
 defaults         unmount default mount points set in user config 
 all              unmount all mounted (exept /guru/.data) 
 system           unmount /guru/.data 

example:
      guru umount /home/casa/guru/projects 
      guru umount projects 
      guru umount defaults 
daemon help
guru daemon help 

usage:    guru daemon [start|stop|status|kill|poll]

commands:
 start        start daemon (same as guru start)
 stop         stop daemon (same as guru stSop)
 status       printout status
 kill         kill jammed daemon
 poll         start polling process

example:
      guru daemon status

keyboard help
guru-client keyboard help 

usage:    guru keyboard [add|rm] {all}

commands:
  add <key> <cmd>   add shortcut
  rm <key>          releases shortcut

'all' will add shortcuts set in '~/.config/guru/casa/userrc'

example:
      guru keyboard add terminal  F1
      guru keyboard add all
      guru keyboard rm all

remote help
guru-client remote help 

usage:    guru remote [push|pull|check|help|status|start|end|install|remove] 

commands:
 check            check that connection to accesspoint server is available 
 add_key          add key pair with ujo.guru and hobo 
 pull             copy configuration files from access point server 
 push             copy configuration files to access point server 
 install          install requirements 
 poll start|end   start or end module status polling 

example:
    guru remote mount /home/casa/share /home/casa/mount/ujo.guru/

system help
unknown command help
guru-client system help

usage:    guru system [core-dump|update|rollback|status|suspend|env] 

 core-dump            dump data for development 
 env get <pid>        get environmental value running process (default is guru-daemon)
 env set <pid>        set environmental value of running process
 update               update and upgrade os
 client-update        upgrade and reinstall guru-client
 client-rollback      rollback to last known working version 
 status               system status output
 suspend <sub_cmd>    suspend functions 'guru system suspend help' for more details 
 flags                show system flag status
 set_flag             arise system flag
 rm_flag              remove system flag
 suspend now          suspend computer
 poll start|end       start or end module status polling 
mqtt help
guru-client mqtt help 

usage:    guru mqtt start|end|status|help|install|remove|single|sub|pub 

commands: 
 sub <topic>              subscribe to topic on local mqtt server 
 single <topic>           subscribe to topic and wait for message, then exit 
 pub <topic> <message>    printout mqtt service status 
 log <topic> <log_file>   subscribe to topic and log it to file 
 install                  install client requirements 
 remove                   remove installed requirements 
 help                     printout this help 
 poll start|end           start or end module status polling 

example: 
         guru mqtt status 

note help

checking /home/casa/guru/notes mounted

checking /home/casa/guru/templates mounted
note database mounted
guru-client note help 

Usage:    guru note [ls|add|open|rm|check|report|locate|tag] <date> 
Commands:

 check          check do note exist, returns 0 if i do 
 list           list of notes. first month (MM), then year (YYYY 
 open|edit|*    open given date notes (use time format %Y%m%d 
  <yesterday>    - open yesterdays notes 
  <tuesday>...   - open last week day notes 
 tag            read or add tags to note file 
 locate         returns file location of note given YYYYMMDD 
 report         open note with template to  

android help

guru-client android help 
usage:    guru android [s|add|open|rm|check|media|camera|all|install] 

commands:
 terminal          open terminal to android 
 media             download all media from phone 
 mount             mount android user folder 
 unmount           unmount android 
 install           install server to android (google play) 
 help              help printout 

example: 
             guru android mount 
             guru android camera 
             guru android terminal 

print help
guru-client print help 
usage:    guru print [label] 
commands:
 label                     print label 

project help
guru-client project help 

usage:    guru project [ls|new|open|status|archive|active|close|rm|sublime|help] <name|id>

commands:
  ls                      list of archived projects 
  new <name|id>           add new projects 
  open <name|id>          open project 
  close                   close project, keep data 
  status <name|id|>     project status
                          if empty, all project status view
  change <name|id>        same as close and open  
  archive <name|id>       move to archive
                          empty input lists archived projects 
  active <name|id>        return archived project 
  rm <name|id>            remove project and files for good 
  install                 install requirements 
  remove                  remove requirements 
  change <name>           change project
  sublime <name>          open only sublime project 
  help                    this help 

most of commands takes project name (or id) as an variable 

example:
 guru project new demo       # init new project called 'demo'
 guru project archive        # list of archived projects 
 guru project archive demo   # archive demo 
 guru project rm demo        # remove all demo project files 

scan help
guru-client scan help 

usage:    guru scan [receipt|invoice|install] 

receipt   scan receipt size grayscale                 
invoice   scan receipt A4 size optimized grayscale    
install   install Epson DS30 driver and applications  
fix       to to fix access limitation problem         

example:  guru scan receipt motonet-tools 
audio help
guru-client audio help 

usage:    guru audio status|close|install|remove|toggle|fast help|tunnel <host|ip> 

commands: 
  tunnel <host>           open tunnel to host 
  toggle <host>           check is tunnel on them stop it, else open tunnel 
  close                   close tunnel 
  ls                      list of local audio devices 
  ls_remote               list of local remote audio devices 
  install                 install requirements 
  remove                  remove requirements 
  fast [command] <host>   quick open tunnel, does not check stuff, just brute force
  fast help               check fast tool help for more detailed instructions

ssh help
guru-client ssh help 

usage:    guru ssh [key|keys] [agent|ps|ls|add|rm|help] <key_file> <host> <port> <user>

Commands:
 key|keys                 key management tools, try 'guru ssh key help' for more info.
   key ps                 list of activekeys 
   key send               send keys to server
    
   key rm                 remove from remote server server [user_name@service_host] 
   key add <...>          add keys to server <domain> <port> <user_name> or
   key add <server>       add keys to known server: ujo.guru, git.ujo.guru, github, bitbucket

Example: 
      guru ssh key add ujo.guru

Any on known ssh command is passed trough to open-ssh client

stamp help
guru-client stamp help 

usage:    guru stamp [date|time|start|end|round|transaction|signature|picture-md] 

commands: 
date              datestamp 
time              timestamp 
start             start time stamp in format HH:MM 
end               end time stamp in format HH:MM 
round             rounded up time stamp 
signature         user signature 
transaction       stansaction stamp for notes 
weekplan          generates week plan (<from> <to> numeral week day) 
all stamps is copied to the clipboard

tag help
usage:    guru tag [add|rm|get] <file>
timer help
guru-client timer help 

usage:    guru timer [start|end|cancel|log|edit|report] <task> <project> <customer> 

 start <task>         start timer for target with last customer and project
 start at [TIME]      start timer at given time in format HH:MM
 end|stop             end current task
 end at [TIME]        end current task at given time in format HH:MM
 cancel               cancel the current task
 log                  print out 10 last records
 edit                 open work time log with 
 report               create report in .csv format and open it with 
 poll start|end       start or end module status polling 

example:  guru timer start config_stuff projectA customerB 
tor help
guru-client tor browser help 

usage:    guru tor [help|check|status|start|kill|install|remove]

trans help
usage:    guru trans source_l:targed_l <text>
